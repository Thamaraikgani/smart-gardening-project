import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import tensorflow as tf
from tensorflow.keras import datasets , layers , models
import pathlib
from tensorflow.keras import regularizers

image_height = 256
image_width = 256
batch_size = 4

ds = tf.keras.utils.image_dataset_from_directory(
  directory = '/content/drive/MyDrive/Colab Notebooks/dataset',
  labels= 'inferred' ,
  label_mode='int',
  image_size=(256,256),
  batch_size=4,
  shuffle=True
)

train_ds_ratio = 0.8

train_ds = ds.take(int(len(ds)*train_ds_ratio))
val_ds = ds.skip(int(len(ds)*train_ds_ratio))

def normalize(image , label):
  image = tf.cast(image/255. , tf.float32)
  return image , label

train_ds = train_ds.map(normalize)
val_ds = val_ds.map(normalize)


num_classes = len(ds.class_names)
class_names = ds.class_names

autotune = tf.data.AUTOTUNE

train_ds = train_ds.cache().shuffle(1000).prefetch(buffer_size=autotune)
val_ds = val_ds.cache().prefetch(buffer_size=autotune)

data_augmentation = tf.keras.Sequential([
    tf.keras.layers.RandomFlip("horizontal_and_vertical"),
    tf.keras.layers.RandomRotation(0.2),
    tf.keras.layers.RandomZoom(height_factor=(0.2, 0.3), width_factor=(0.2, 0.3))
]
)
train_ds = train_ds.map(lambda x, y: (data_augmentation(x , training = True) ,y))

base_model = tf.keras.applications.MobileNetV2(
    input_shape=(256,256,3),
    include_top=False,
    weights='imagenet'
)

base_model.trainable = False

model = tf.keras.Sequential([
    base_model,
    tf.keras.layers.GlobalAveragePooling2D(),
    tf.keras.layers.Dense(128, activation='relu', kernel_regularizer=regularizers.l2(0.001)),
    tf.keras.layers.Dropout(0.3),
    tf.keras.layers.Dense(num_classes, activation='softmax')
])
model.compile(
    optimizer = tf.optimizers.Adam(0.0001),
    loss = 'sparse_categorical_crossentropy',
    metrics = ['accuracy']
)
epochs = 50
history = model.fit(
    train_ds,
    validation_data = val_ds,
    epochs = epochs,
)

model_save_path = '/content/drive/MyDrive/Colab Notebooks/plant_classifier_model.keras'
model.save(model_save_path)

def predict_new_image(image_path, model, class_names, img_height, img_width):
    try:
        img = tf.keras.utils.load_img(image_path, target_size=(img_height, img_width))
        img_array = tf.keras.utils.img_to_array(img)
        img_array = tf.expand_dims(img_array, 0) # Create a batch (add batch dimension)

        # Normalize the image in the same way as training data
        img_array = tf.cast(img_array / 255.0, tf.float32)

        predictions = model.predict(img_array)
        score = tf.nn.softmax(predictions[0]) # Get probabilities

        predicted_class_id = np.argmax(score)
        predicted_class_name = class_names[predicted_class_id]
        confidence = 100 * np.max(score)

        print(f"\nPrediction for {image_path}:")
        print(f"This image most likely belongs to '{predicted_class_name}' with a {confidence:.2f}% confidence.")

        # Display the image with prediction
        plt.imshow(img)
        plt.title(f"Predicted: {predicted_class_name} ({confidence:.2f}%)")
        plt.axis("off")
        plt.show()
    except:
        print('An error occured')
